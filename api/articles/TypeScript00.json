{"title":"TypeScript系列教程--初探TypeScript(0)","slug":"TypeScript00","date":"2018-01-19T02:28:51.000Z","updated":"2018-01-20T07:03:43.915Z","comments":true,"path":"api/articles/TypeScript00.json","photos":[],"link":"","excerpt":"王不会今天给大家带来的是TypeScript系列学习教程之一的第一篇：初探TypeScript。","covers":["/imgs/2018/01/typeScript.jpg"],"content":"<p><code>王不会</code>今天给大家带来的是<code>TypeScript</code>系列学习教程之一的第一篇：初探TypeScript。</p>\n <a id=\"more\"></a>\n<h2 id=\"关于TypeScript\"><a href=\"#关于TypeScript\" class=\"headerlink\" title=\"关于TypeScript\"></a>关于TypeScript</h2><p><code>TypeScript</code> – JavaScript的超集</p>\n<blockquote>\n<p>TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。<br>TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。</p>\n</blockquote>\n<h3 id=\"TypeScript优势\"><a href=\"#TypeScript优势\" class=\"headerlink\" title=\"TypeScript优势\"></a>TypeScript优势</h3><p><img src=\"/imgs/2018/01/typeScript.jpg\" alt=\"TypeScript\"></p>\n<h2 id=\"5分钟上手TypeScript\"><a href=\"#5分钟上手TypeScript\" class=\"headerlink\" title=\"5分钟上手TypeScript\"></a>5分钟上手TypeScript</h2><p>让我们使用TypeScript来创建一个简单的Web应用。</p>\n<h3 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h3><p>有两种主要的方式来获取TypeScript工具：</p>\n<ul>\n<li>通过npm（Node.js包管理器）</li>\n<li>安装Visual Studio的TypeScript插件</li>\n</ul>\n<p>Visual Studio 2017和Visual Studio 2015 Update 3默认包含了TypeScript。 如果你的Visual Studio还没有安装TypeScript，你可以下载它。</p>\n<p>针对使用npm的用户：</p>\n<pre><code>npm install -g typescript\n</code></pre><h3 id=\"构建你的第一个TypeScript文件\"><a href=\"#构建你的第一个TypeScript文件\" class=\"headerlink\" title=\"构建你的第一个TypeScript文件\"></a>构建你的第一个TypeScript文件</h3><p>在编辑器，将下面的代码输入到<code>greeter.ts</code>文件里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"string\">\"Jane User\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译代码\"><a href=\"#编译代码\" class=\"headerlink\" title=\"编译代码\"></a>编译代码</h3><p>我们使用了<code>.ts</code>扩展名，但是这段代码仅仅是JavaScript而已。 你可以直接从现有的JavaScript应用里复制/粘贴这段代码。</p>\n<p>在命令行上，运行TypeScript编译器：</p>\n<pre><code>tsc greeter.ts\n</code></pre><p>输出结果为一个<code>greeter.js</code>文件，它包含了和输入文件中相同的JavsScript代码。 一切准备就绪，我们可以运行这个使用TypeScript写的JavaScript应用了！</p>\n<p>接下来让我们看看TypeScript工具带来的高级功能。 给 <code>person</code>函数的参数添加<code>: string</code>类型注解，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\">person: string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"string\">\"Jane User\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型注解\"><a href=\"#类型注解\" class=\"headerlink\" title=\"类型注解\"></a>类型注解</h3><p>TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。 在这个例子里，我们希望 <code>greeter</code>函数接收一个字符串参数。 然后尝试把 <code>greeter</code>的调用改成传入一个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\">person: string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure>\n<p>重新编译，你会看到产生了一个错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greeter.ts(<span class=\"number\">7</span>,<span class=\"number\">26</span>): error TS2345: Argument <span class=\"keyword\">of</span> type <span class=\"string\">'number[]'</span> is not assignable to parameter <span class=\"keyword\">of</span> type <span class=\"string\">'string'</span>.</span><br></pre></td></tr></table></figure>\n<p>类似地，尝试删除<code>greeter</code>调用的所有参数。 TypeScript会告诉你使用了非期望个数的参数调用了这个函数。 在这两种情况中，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。</p>\n<p>要注意的是尽管有错误，<code>greeter.js</code>文件还是被创建了。 就算你的代码里有错误，你仍然可以使用TypeScript。但在这种情况下，TypeScript会警告你代码可能不会按预期执行。</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>让我们开发这个示例应用。这里我们使用接口来描述一个拥有<code>firstName</code>和<code>lastName</code>字段的对象。 在TypeScript里，只在两个类型内部的结构兼容那么这两个类型就是兼容的。 这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，而不必明确地使用 <code>implements</code>语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    firstName: string;</span><br><span class=\"line\">    lastName: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\">person: Person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + person.firstName + <span class=\"string\">\" \"</span> + person.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123; <span class=\"attr\">firstName</span>: <span class=\"string\">\"Jane\"</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">\"User\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>最后，让我们使用类来改写这个例子。 TypeScript支持JavaScript的新特性，比如支持基于类的面向对象编程。</p>\n<p>让我们创建一个<code>Student</code>类，它带有一个构造函数和一些公共字段。 注意类和接口可以一起共作，程序员可以自行决定抽象的级别。</p>\n<p>还要注意的是，在构造函数的参数上使用<code>public</code>等同于创建了同名的成员变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    fullName: string;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(public firstName, public middleInitial, public lastName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fullName = firstName + <span class=\"string\">\" \"</span> + middleInitial + <span class=\"string\">\" \"</span> + lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    firstName: string;</span><br><span class=\"line\">    lastName: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\">person : Person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + person.firstName + <span class=\"string\">\" \"</span> + person.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Jane\"</span>, <span class=\"string\">\"M.\"</span>, <span class=\"string\">\"User\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure>\n<p>重新运行<code>tsc</code> <code>greeter.ts</code>，你会看到生成的JavaScript代码和原先的一样。 TypeScript里的类只是JavaScript里常用的基于原型面向对象编程的简写。</p>\n<h3 id=\"运行TypeScript-Web应用\"><a href=\"#运行TypeScript-Web应用\" class=\"headerlink\" title=\"运行TypeScript Web应用\"></a>运行TypeScript Web应用</h3><p>在greeter.html里输入如下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>TypeScript Greeter<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"greeter.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器里打开greeter.html运行这个应用！</p>\n<p>可选地：在Visual Studio里打开<code>greeter.ts</code>或者把代码复制到TypeScript playground。 将鼠标悬停在标识符上查看它们的类型。 注意在某些情况下它们的类型可以被自动地推断出来。 重新输入一下最后一行代码，看一下自动补全列表和参数列表，它们会根据DOM元素类型而变化。 将光标放在 <code>greeter</code>函数上，点击F12可以跟踪到它的定义。 还有一点，你可以右键点击标识，使用重构功能来重命名。</p>\n","categories":[{"name":"趣味代码","slug":"趣味代码","count":1,"path":"api/categories/趣味代码.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":1,"path":"api/tags/TypeScript.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}]}